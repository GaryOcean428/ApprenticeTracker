/**
 * WHS Report Generator Service
 *
 * Generates PDF and Excel reports for WHS incidents, risk assessments, and inspections
 */

import jsPDF from 'jspdf';
import autoTable, { UserOptions } from 'jspdf-autotable';
import * as ExcelJS from 'exceljs';

// Extend jsPDF with autoTable
interface jsPDFWithAutoTable extends jsPDF {
  autoTable: (options: UserOptions) => void;
}

/**
 * Generate PDF report for WHS incidents
 */
export async function generateIncidentPDFReport(reportData: any): Promise<Buffer> {
  try {
    const doc = new jsPDF() as jsPDFWithAutoTable;
    
    // Add header
    doc.setFontSize(20);
    doc.text('WHS Incidents Report', 20, 30);
    
    doc.setFontSize(12);
    doc.text(`Generated: ${new Date(reportData.summary.reportGeneratedAt).toLocaleDateString()}`, 20, 45);
    
    // Add summary section
    doc.setFontSize(14);
    doc.text('Summary', 20, 65);
    
    const summaryY = 75;
    doc.setFontSize(10);
    doc.text(`Total Incidents: ${reportData.summary.totalIncidents}`, 20, summaryY);
    
    // Status breakdown
    const statusText = Object.entries(reportData.summary.statusCounts)
      .map(([status, count]) => `${status}: ${count}`)
      .join(', ');
    doc.text(`Status Distribution: ${statusText}`, 20, summaryY + 10);
    
    // Severity breakdown
    const severityText = Object.entries(reportData.summary.severityCounts)
      .map(([severity, count]) => `${severity}: ${count}`)
      .join(', ');
    doc.text(`Severity Distribution: ${severityText}`, 20, summaryY + 20);
    
    // Add incidents table
    const tableStartY = summaryY + 40;
    
    const tableData = reportData.incidents.map((incident: any) => [
      incident.title || '',
      incident.status || '',
      incident.severity || '',
      new Date(incident.date_occurred).toLocaleDateString(),
      incident.location || '',
      incident.reporter_name || 'Unknown',
      incident.host_employer_name || 'N/A'
    ]);
    
    doc.autoTable({
      head: [['Title', 'Status', 'Severity', 'Date', 'Location', 'Reporter', 'Host Employer']],
      body: tableData,
      startY: tableStartY,
      styles: { fontSize: 8, cellPadding: 2 },
      headStyles: { fillColor: [41, 128, 185], textColor: 255 },
      alternateRowStyles: { fillColor: [245, 245, 245] },
      columnStyles: {
        0: { cellWidth: 40 }, // Title
        1: { cellWidth: 25 }, // Status
        2: { cellWidth: 20 }, // Severity
        3: { cellWidth: 25 }, // Date
        4: { cellWidth: 30 }, // Location
        5: { cellWidth: 25 }, // Reporter
        6: { cellWidth: 25 }  // Host Employer
      }
    });
    
    // Add footer
    const finalY = (doc as any).lastAutoTable?.finalY || tableStartY + 50;
    doc.setFontSize(8);
    doc.text('Generated by ApprenticeTracker WHS System', 20, finalY + 20);
    
    return Buffer.from(doc.output('arraybuffer'));
  } catch (error) {
    console.error('Error generating PDF report:', error);
    throw new Error('Failed to generate PDF report');
  }
}

/**
 * Generate Excel report for WHS incidents
 */
export async function generateIncidentExcelReport(reportData: any): Promise<Buffer> {
  try {
    const workbook = new ExcelJS.Workbook();
    workbook.creator = 'ApprenticeTracker WHS System';
    workbook.lastModifiedBy = 'ApprenticeTracker';
    workbook.created = new Date();
    
    // Create summary worksheet
    const summarySheet = workbook.addWorksheet('Summary');
    
    // Add title
    summarySheet.addRow(['WHS Incidents Report']);
    summarySheet.getRow(1).font = { size: 16, bold: true };
    summarySheet.addRow([]);
    
    // Add generation date
    summarySheet.addRow(['Generated:', new Date(reportData.summary.reportGeneratedAt).toLocaleDateString()]);
    summarySheet.addRow([]);
    
    // Add summary data
    summarySheet.addRow(['Summary Statistics']);
    summarySheet.getRow(5).font = { bold: true };
    summarySheet.addRow(['Total Incidents:', reportData.summary.totalIncidents]);
    summarySheet.addRow([]);
    
    // Status distribution
    summarySheet.addRow(['Status Distribution']);
    summarySheet.getRow(8).font = { bold: true };
    Object.entries(reportData.summary.statusCounts).forEach(([status, count]) => {
      summarySheet.addRow([status, count]);
    });
    summarySheet.addRow([]);
    
    // Severity distribution  
    const severityStartRow = summarySheet.rowCount + 1;
    summarySheet.addRow(['Severity Distribution']);
    summarySheet.getRow(severityStartRow).font = { bold: true };
    Object.entries(reportData.summary.severityCounts).forEach(([severity, count]) => {
      summarySheet.addRow([severity, count]);
    });
    
    // Auto-fit columns
    summarySheet.columns.forEach(column => {
      column.width = 20;
    });
    
    // Create incidents worksheet
    const incidentsSheet = workbook.addWorksheet('Incidents');
    
    // Add headers
    const headers = [
      'Title', 'Status', 'Severity', 'Type', 'Date Occurred', 'Date Reported',
      'Location', 'Reporter', 'Host Employer', 'Immediate Actions', 'Description'
    ];
    incidentsSheet.addRow(headers);
    
    // Style headers
    const headerRow = incidentsSheet.getRow(1);
    headerRow.font = { bold: true, color: { argb: 'FFFFFF' } };
    headerRow.fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: '2980B9' }
    };
    
    // Add incident data
    reportData.incidents.forEach((incident: any) => {
      incidentsSheet.addRow([
        incident.title || '',
        incident.status || '',
        incident.severity || '',
        incident.type || '',
        incident.date_occurred ? new Date(incident.date_occurred).toLocaleDateString() : '',
        incident.date_reported ? new Date(incident.date_reported).toLocaleDateString() : '',
        incident.location || '',
        incident.reporter_name || 'Unknown',
        incident.host_employer_name || 'N/A',
        incident.immediate_actions || '',
        incident.description || ''
      ]);
    });
    
    // Auto-fit columns
    incidentsSheet.columns.forEach((column, index) => {
      let maxLength = 0;
      const columnLetter = String.fromCharCode(65 + index);
      
      incidentsSheet.getColumn(columnLetter).eachCell({ includeEmpty: true }, (cell) => {
        const columnLength = cell.value ? String(cell.value).length : 0;
        if (columnLength > maxLength) {
          maxLength = columnLength;
        }
      });
      
      column.width = Math.min(Math.max(maxLength + 2, 12), 50);
    });
    
    // Apply borders and alternating row colors
    incidentsSheet.eachRow({ includeEmpty: false }, (row, rowNumber) => {
      if (rowNumber > 1 && rowNumber % 2 === 0) {
        row.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'F8F9FA' }
        };
      }
      
      row.eachCell((cell) => {
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' }
        };
      });
    });
    
    // Generate buffer
    return await workbook.xlsx.writeBuffer() as Buffer;
  } catch (error) {
    console.error('Error generating Excel report:', error);
    throw new Error('Failed to generate Excel report');
  }
}

/**
 * Generate PDF report for risk assessments
 */
export async function generateRiskAssessmentPDFReport(assessments: any[]): Promise<Buffer> {
  try {
    const doc = new jsPDF() as jsPDFWithAutoTable;
    
    // Add header
    doc.setFontSize(20);
    doc.text('WHS Risk Assessments Report', 20, 30);
    
    doc.setFontSize(12);
    doc.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 45);
    doc.text(`Total Assessments: ${assessments.length}`, 20, 55);
    
    // Add assessments table
    const tableData = assessments.map((assessment: any) => [
      assessment.title || '',
      assessment.status || '',
      new Date(assessment.assessment_date).toLocaleDateString(),
      assessment.location || '',
      assessment.assessor_name || 'Unknown',
      assessment.host_employer_name || 'N/A',
      assessment.approval_date ? new Date(assessment.approval_date).toLocaleDateString() : 'Pending'
    ]);
    
    doc.autoTable({
      head: [['Title', 'Status', 'Assessment Date', 'Location', 'Assessor', 'Host Employer', 'Approved']],
      body: tableData,
      startY: 70,
      styles: { fontSize: 8, cellPadding: 2 },
      headStyles: { fillColor: [52, 152, 219], textColor: 255 },
      alternateRowStyles: { fillColor: [245, 245, 245] }
    });
    
    return Buffer.from(doc.output('arraybuffer'));
  } catch (error) {
    console.error('Error generating risk assessment PDF report:', error);
    throw new Error('Failed to generate risk assessment PDF report');
  }
}

/**
 * Generate Excel report for risk assessments
 */
export async function generateRiskAssessmentExcelReport(assessments: any[]): Promise<Buffer> {
  try {
    const workbook = new ExcelJS.Workbook();
    workbook.creator = 'ApprenticeTracker WHS System';
    
    const worksheet = workbook.addWorksheet('Risk Assessments');
    
    // Add title
    worksheet.addRow(['WHS Risk Assessments Report']);
    worksheet.getRow(1).font = { size: 16, bold: true };
    worksheet.addRow(['Generated:', new Date().toLocaleDateString()]);
    worksheet.addRow(['Total Assessments:', assessments.length]);
    worksheet.addRow([]);
    
    // Add headers
    const headers = [
      'Title', 'Status', 'Assessment Date', 'Review Date', 'Location', 'Work Area',
      'Assessor', 'Host Employer', 'Findings', 'Recommendations', 'Approved By', 'Approval Date'
    ];
    worksheet.addRow(headers);
    
    // Style headers
    const headerRow = worksheet.getRow(5);
    headerRow.font = { bold: true, color: { argb: 'FFFFFF' } };
    headerRow.fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: '3498DB' }
    };
    
    // Add data
    assessments.forEach((assessment: any) => {
      worksheet.addRow([
        assessment.title || '',
        assessment.status || '',
        assessment.assessment_date ? new Date(assessment.assessment_date).toLocaleDateString() : '',
        assessment.review_date ? new Date(assessment.review_date).toLocaleDateString() : '',
        assessment.location || '',
        assessment.work_area || '',
        assessment.assessor_name || 'Unknown',
        assessment.host_employer_name || 'N/A',
        assessment.findings || '',
        assessment.recommendations || '',
        assessment.approver_name || 'Pending',
        assessment.approval_date ? new Date(assessment.approval_date).toLocaleDateString() : 'Pending'
      ]);
    });
    
    // Auto-fit columns
    worksheet.columns.forEach((column, index) => {
      let maxLength = 0;
      const columnLetter = String.fromCharCode(65 + index);
      
      worksheet.getColumn(columnLetter).eachCell({ includeEmpty: true }, (cell) => {
        const columnLength = cell.value ? String(cell.value).length : 0;
        if (columnLength > maxLength) {
          maxLength = columnLength;
        }
      });
      
      column.width = Math.min(Math.max(maxLength + 2, 12), 50);
    });
    
    return await workbook.xlsx.writeBuffer() as Buffer;
  } catch (error) {
    console.error('Error generating risk assessment Excel report:', error);
    throw new Error('Failed to generate risk assessment Excel report');
  }
}